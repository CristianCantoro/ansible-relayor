---

- name: Ensure Tor DataDir(s) exist and is owned by {{ tor_user }}
  sudo: yes
  file: path={{ tor_DataDir }}/{{ item[0] }}_{{ item.1.orport }}
    state=directory
    owner={{ tor_user }}
    mode=0700
  with_nested:
   - "{{ tor_ips }}"
   - "{{ tor_ports }}"

- name: Ensure Tor config directory exists and has appropriate permissions
  sudo: yes
  file: path={{ tor_ConfDir }}
    state=directory
    owner=root
    group={{ tor_user }}
    mode=755

- name: Ensure Tor log file(s) are not world readable
  sudo: yes
  file: path="{{ tor_LogDir }}/{{ item[0] }}_{{ item.1.orport }}.log"
    state=touch
    owner={{ tor_user }}
    mode=600
  with_nested:
   - tor_ips
   - tor_ports

- name: Ensure Tor PidDir is owned by tor_user
  sudo: yes
  file: path={{ tor_PidDir }}
    state=directory
    owner={{ tor_user }}
    group={{ tor_user }}
    mode=2750

- name: Generating TEMPORARY (without MyFamily) torrc file(s)...
  sudo: yes
  template: src=torrc
    dest="{{ tor_ConfDir }}/{{ item[0] }}_{{ item.1.orport }}.torrc-tmp"
    owner=root
    mode=0644
  with_nested:
   - tor_ips
   - tor_ports

- name: Generate keys (if not in place yet) and gather relay fingerprints (for MyFamily)
  sudo: yes
  shell: "tor --hush -f {{ tor_ConfDir }}/{{ item[0] }}_{{ item.1.orport }}.torrc-tmp --list-fingerprint |cut -d' ' -f2-|sed -e 's, ,,g'"
  with_nested:
   - tor_ips
   - tor_ports
  register: tor_fingerprints

- name: Remove temporary files
  sudo: yes
  file: path="{{ tor_ConfDir }}/{{ item[0] }}_{{ item.1.orport }}.torrc-tmp"
    state=absent
  with_nested:
   - tor_ips
   - tor_ports

- name: Generating torrc file(s) - this time with MyFamily...
  sudo: yes
  template: >
    src=torrc
    dest="{{ tor_ConfDir }}/{{ item[0] }}_{{ item.1.orport }}.torrc"
    owner=root
    mode=0644
    backup=yes
  with_nested:
   - tor_ips
   - tor_ports
  register: instances

# disabled for now
# bug in --verify-config (trac #15015)
#
#- name: Ensure torrc files are sane
#  shell: "tor --verify-config -f {{ tor_ConfDir }}/{{ item[0] }}_{{ item.1.orport }}.torrc"
#  with_nested:
#   - tor_ips
#   - tor_ports

- name: Ensure Tor instances are reloaded if its torrc changed
  sudo: yes
  shell: "kill -HUP `cat {{ tor_PidDir }}/{{ item.item[0] }}_{{ item.item.1.orport }}.pid`"
  ignore_errors: yes
  with_items: instances.results
  when: item.changed == True

- name: Ensure Tor instances are running
  sudo: yes
  shell: "kill -0 `cat {{ tor_PidDir }}/{{ item[0] }}_{{ item.1.orport }}.pid` || tor -f {{ tor_ConfDir }}/{{ item[0] }}_{{ item.1.orport }}.torrc"
  with_nested:
   - tor_ips
   - tor_ports
