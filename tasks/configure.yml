---

- name: Ensure Tor DataDir(s) exist and is owned by tor_user
  sudo: yes
  file: path={{ tor_DataDir }}/{{ item[0] }}_{{ item.1.orport }}
    state=directory
    owner={{ tor_user }}
    mode=0700
    recurse=yes
  with_nested:
   - "{{ tor_ips }}"
   - "{{ tor_ports }}"

- name: Ensure Tor config directory exists and has appropriate permissions
  sudo: yes
  file: path={{ tor_ConfDir }}
    state=directory
    owner=root
    group={{ tor_user }}
    mode=755

- name: Ensure LogDir exists and has appropriate permissions
  sudo: yes
  file: path={{ tor_LogDir }}
    state=directory
    owner={{ tor_user }}
    mode=750

- name: Ensure PidDir is owned by tor_user
  sudo: yes
  file: path={{ tor_PidDir }}
    state=directory
    owner={{ tor_user }}
    group={{ tor_user }}
    mode=2750

- name: Generating temporary (without MyFamily) torrc file(s)...
  sudo: yes
  template: src=torrc
    dest="{{ tor_ConfDir }}/{{ item[0] }}_{{ item.1.orport }}.torrc-tmp"
    owner=root
    mode=0644
  with_nested:
   - tor_ips
   - tor_ports

- name: Collect relay fingerprints (for MyFamily)
  sudo: yes
  shell: "tor --hush -f {{ tor_ConfDir }}/{{ item[0] }}_{{ item.1.orport }}.torrc-tmp --list-fingerprint |cut -d' ' -f2-|sed -e 's, ,,g'"
  with_nested:
   - tor_ips
   - tor_ports
  register: tor_fingerprints

- name: Remove temporary torrc files
  sudo: yes
  file: path="{{ tor_ConfDir }}/{{ item[0] }}_{{ item.1.orport }}.torrc-tmp"
    state=absent
  with_nested:
   - tor_ips
   - tor_ports

- name: Generating final torrc file(s) (with MyFamily)
  sudo: yes
  template: >
    src=torrc
    dest="{{ tor_ConfDir }}/{{ item[0] }}_{{ item.1.orport }}.torrc"
    owner=root
    mode=0644
    backup=yes
    validate="tor --verify-config -f %s"
  with_nested:
   - tor_ips
   - tor_ports
  register: instances

# Linux/systemd section (uses service module)
# ===========================================
 
- name: Ensure Tor instances are reloaded if its torrc changed (Linux/systemd)
  sudo: yes
  service: name=tor@{{ item.item[0] }}_{{ item.item.1.orport }}.service state=reloaded
  with_items: instances.results
  when: ansible_system == 'Linux' and item.changed == True 

- name: Ensure Tor instances are enabled and started (Linux/systemd)
  sudo: yes
  service: name=tor@{{ item[0] }}_{{ item.1.orport }}.service enabled=yes state=started
  with_nested:
   - tor_ips
   - tor_ports
  when: ansible_system == 'Linux'


# OpenBSD section (uses service module)
# This is basically a copy from the Linux
# section, but it requires different service
# names and additional arguments.
# =====================================

- name: Ensure Tor instances are reloaded if its torrc changed (OpenBSD)
  sudo: yes
  service: name=tor{{ item.item[0]|replace('.','_') }}_{{ item.item.1.orport }} state=reloaded
  with_items: instances.results
  when: ansible_system == 'OpenBSD' and item.changed == True

- name: Ensure Tor instances are enabled and started (OpenBSD)
  sudo: yes
  service: name=tor{{ item[0]|replace('.','_') }}_{{ item.1.orport }}
   arguments="-f {{ tor_ConfDir }}/{{ item[0] }}_{{ item.1.orport }}.torrc" enabled=yes state=started
  with_nested:
   - tor_ips
   - tor_ports
  when: ansible_system == 'OpenBSD'


# FreeBSD section
# ================

- name: Ensure Tor instances are reloaded if its torrc changed (FreeBSD)
  sudo: yes
  shell: "kill -HUP `cat {{ tor_PidDir }}/{{ item.item[0] }}_{{ item.item.1.orport }}.pid`"
  ignore_errors: yes
  with_items: instances.results
  when: item.changed == True and ansible_system == 'FreeBSD'

- name: Ensure Tor instances are running (FreeBSD)
  sudo: yes
  shell: "kill -0 `cat {{ tor_PidDir }}/{{ item[0] }}_{{ item.1.orport }}.pid` || tor -f {{ tor_ConfDir }}/{{ item[0] }}_{{ item.1.orport }}.torrc"
  with_nested:
   - tor_ips
   - tor_ports
  when: ansible_system == 'FreeBSD'
